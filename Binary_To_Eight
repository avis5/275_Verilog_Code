//design code
module Binary2Eight(
	input [3:0] Num,
	output reg [7:0] SevenSeg
);

always@(*)
begin
  case(Num)
	 4'b0000: SevenSeg = 8'b11000000; //0
	 4'b0001: SevenSeg = 8'b11111001; //1
	 4'b0010: SevenSeg = 8'b10100100; //2
	 4'b0011: SevenSeg = 8'b10110000; //3
	 4'b0100: SevenSeg = 8'b10011001; //4
	 4'b0101: SevenSeg = 8'b10010010; //5
	 4'b0110: SevenSeg = 8'b10000010; //6
	 4'b0111: SevenSeg = 8'b11111000; //7
	 
	 4'b1000: SevenSeg = 8'b00000000; //-8
	 4'b1001: SevenSeg = 8'b01111000; //-7
	 4'b1010: SevenSeg = 8'b00000010; //-6
	 4'b1011: SevenSeg = 8'b00010010; //-5
	 4'b1100: SevenSeg = 8'b00011001; //-4
	 4'b1101: SevenSeg = 8'b00110000; //-3
	 4'b1110: SevenSeg = 8'b00100100; //-2
	 4'b1111: SevenSeg = 8'b01111001; //-1
    default: SevenSeg = 8'b11111111; 
	endcase
end
endmodule


module SimpleALU(a, b, s, f, of, SevenSeg);

	input signed [3:0] a;					
	input signed [3:0] b;
	input [1:0] s;
  output reg signed [3:0] f; 
  output reg of;
  output [7:0] SevenSeg;
  	always@(*) 
    begin
      case(s)
		 2'b00 : f = 4'b0000;
		 2'b01 : f = a + b;
         2'b10 : f = a - b;
         2'b11 : 
           begin
			if (a==b)
				f = a;
			else if (a<b)
				f = b;
			else if (a>b)
				f = a;
           end
      endcase
      if (f < 4'b1000)
    		assign of = 1;
  		else
      		assign of = 0;
    end

  	
	// Instantiate the seven segment decoder
  	Binary2Eight SIGN(f, SevenSeg);
      
endmodule


//testbench code
`timescale 1ns/1ps

module testbench();
  	reg [3:0]A,B;
  	reg [1:0]S;
  	wire [3:0]F;
  	wire OF;
  	wire [7:0] SEVENSEG;
  	SimpleALU ALUU(A, B, S, OF, F, SEVENSEG);

  initial begin
  //display /dumpwaves
      $dumpfile("dump.vcd");
  //displays testbench and design
      $dumpvars(1,testbench);
  // As to 1111 and Bs to 1111 
      A = 4'b0011;
      B = 4'b0011;
      S = 2'b01;
      #1
  //As = 1010 and Bs = 0101 
      A = 4'b0101;
      B = 4'b0101;
      S = 2'b01;
      #1
  // As = 0111 and Bs = 0001
      A = 4'b0111;
      B = 4'b0001;
      S = 2'b00;
      #1
  // As and Bs to 0
      A = 4'b0000;
      B = 4'b0000;
      S = 2'b11;
    end
  endmodule
