//design code
module Counter(clk, reset, select, q, ssd);
  input clk, reset, select;
  output reg [3:0]q;
  output reg [6:0]ssd;
  
  always @(posedge reset or posedge clk) 
    begin
    if (reset)
      q <= 4'b0000;
    else if (~select)
      q <= q + 4'b0001;
    else if (select)
      q <= q - 4'b0001;
    end
  
  always@(q)
  begin
    case(q)
       4'b0000: ssd = 7'b1000000; //0
       4'b0001: ssd = 7'b1111001; //1
       4'b0010: ssd = 7'b0010010; //2
       4'b0011: ssd = 7'b0000110; //3
       4'b0100: ssd = 7'b1001100; //4
       4'b0101: ssd = 7'b0100100; //5
       4'b0110: ssd = 7'b0100000; //6
       4'b0111: ssd = 7'b0001111; //7
       4'b1000: ssd = 7'b0000000; //8
       4'b1001: ssd = 7'b0001100; //9
       4'b1010: ssd = 7'b0001000; //A
       4'b1011: ssd = 7'b1100000; //B
       4'b1100: ssd = 7'b0110001; //C
       4'b1101: ssd = 7'b1000010; //D
       4'b1110: ssd = 7'b0000110; //E
       4'b1111: ssd = 7'b0001110; //F
	endcase
  end  

endmodule

//testbench code
module test;
  reg clk,reset,select;
  wire [3:0]q;
  wire [6:0]ssd;
  
//instantiate the counter
  
  Counter T(clk,reset,select,q,ssd);
  
  initial begin
    $dumpfile("dump.vcd");
    //$dumpvars(1,test); //show top level wave
    $dumpvars(0,test); //show all level wave
    
    clk = 1'b0; //set clk to 0
    
    reset = 1'b1; //reset to high
    select = 1'b1; //select count up 
    #10 //wait
    reset = 1'b0; //reset to low, start counting
    #200 //count for X units
    
    reset = 1'b1; //reset to high
    select = 1'b0; //select count up 
    #10 //wait
    reset = 1'b0; //reset to low, start counting
    #200 //count for X units
    
    $finish;
  end
  
  always #5 clk = ~clk; //clock changes every 5 units
  
endmodule
